import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  ResearchProvider, 
  ProviderCapabilities, 
  ResearchConfig, 
  ResearchResult,
  ResearchProcess,
  SearchQuery,
  EvidenceGrade
} from './baseProvider';

export class DeepResearchProvider implements ResearchProvider {
  name = 'gemini_deep_research';
  capabilities: ProviderCapabilities = {
    hasWebSearch: true,
    hasDeepResearch: true,
    maxQueries: 20,
    sourceValidation: true,
    iterativeRefinement: true
  };

  private genAI: GoogleGenerativeAI;
  private startTime: number = 0;

  constructor() {
    const apiKey = (import.meta as any).env?.VITE_GEMINI_API_KEY || 
                  (import.meta as any).env?.VITE_API_KEY || 
                  process.env.GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('API Key no est√° configurada. Configure VITE_GEMINI_API_KEY en el archivo .env');
    }
    
    this.genAI = new GoogleGenerativeAI({ apiKey });
  }

  async generateContent(
    prompt: string, 
    config: ResearchConfig = {
      mode: 'deep_research',
      maxSources: 25,
      searchDepth: 'comprehensive',
      timeoutMinutes: 10
    }
  ): Promise<ResearchResult> {
    this.startTime = Date.now();

    try {
      // Configure Deep Research with enhanced search capabilities
      const generationConfig = {
        temperature: 0.1,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192,
      };

      // Create Deep Research prompt
      const deepResearchPrompt = this.createDeepResearchPrompt(prompt, config);
      
      console.log('üîç Iniciando Deep Research...');
      
      // Execute Deep Research with Google Search
      const response = await this.genAI.models.generateContent({
        model: 'gemini-1.5-flash',
        contents: [{ role: 'user', parts: [{ text: deepResearchPrompt }] }],
        generationConfig,
        tools: [{
          googleSearchRetrieval: {
            // Enhanced search for Deep Research
            dynamicRetrievalConfig: {
              mode: 'MODE_DYNAMIC',
              dynamicThreshold: 0.7
            }
          }
        }]
      });
      
      // Parse results and extract metadata  
      const content = response.response.text();
      const sources = this.extractSources(response.response);
      const process = this.extractResearchProcess(content);
      
      const executionTime = Date.now() - this.startTime;

      console.log(`‚úÖ Deep Research completado en ${executionTime}ms`);
      console.log(`üìä Fuentes encontradas: ${sources.length}`);

      return {
        content,
        sources,
        metadata: {
          provider: this.name,
          mode: config.mode,
          executionTime,
          sourcesAnalyzed: sources.length,
          queriesExecuted: process?.executionPhase.queriesExecuted.length || 0,
          confidenceScore: this.calculateConfidenceScore(sources, content)
        },
        process
      };

    } catch (error) {
      console.error('‚ùå Error en Deep Research:', error);
      throw new Error(`Deep Research failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private createDeepResearchPrompt(originalPrompt: string, config: ResearchConfig): string {
    return `${originalPrompt}

üî¨ **MODO DEEP RESEARCH ACTIVADO - INVESTIGACI√ìN M√âDICA AUT√ìNOMA**

Como agente de investigaci√≥n m√©dica especializado en oftalmolog√≠a, debes realizar una investigaci√≥n AUT√ìNOMA y EXHAUSTIVA siguiendo este protocolo:

**PROTOCOLO DE DEEP RESEARCH:**

1. **AN√ÅLISIS INICIAL INTELIGENTE:**
   - Identifica autom√°ticamente s√≠ntomas clave, demograf√≠a del paciente y contexto cl√≠nico
   - Genera una lista priorizada de l√≠neas de investigaci√≥n m√©dica
   - Determina el nivel de urgencia y complejidad del caso

2. **INVESTIGACI√ìN ITERATIVA AUT√ìNOMA:**
   - Ejecuta m√∫ltiples b√∫squedas especializadas autom√°ticamente
   - Refina b√∫squedas bas√°ndote en hallazgos previos
   - Busca evidencia tanto a favor como en contra de cada hip√≥tesis
   - Prioriza fuentes de alta calidad: PubMed, Cochrane, AAO Guidelines
   - Analiza contradiciones en la literatura autom√°ticamente

3. **VALIDACI√ìN Y S√çNTESIS INTELIGENTE:**
   - Eval√∫a la calidad metodol√≥gica de cada fuente
   - Identifica gaps de informaci√≥n autom√°ticamente
   - Sintetiza evidencia aplicando razonamiento bayesiano
   - Genera diagn√≥sticos diferenciales con probabilidades

**CRITERIOS DE CALIDAD:**
- M√≠nimo ${config.maxSources} fuentes m√©dicas especializadas
- An√°lisis cr√≠tico de evidencia contradictoria
- Evaluaci√≥n de aplicabilidad al caso espec√≠fico
- Identificaci√≥n expl√≠cita de limitaciones

**ESTRUCTURA DE RESPUESTA REQUERIDA:**

## üéØ RESUMEN EJECUTIVO
[Diagn√≥stico m√°s probable, nivel de urgencia, siguiente paso cr√≠tico]

## üîç PROCESO DE INVESTIGACI√ìN REALIZADO
### Estrategia de B√∫squeda Implementada
- L√≠neas de investigaci√≥n identificadas
- N√∫mero de b√∫squedas ejecutadas
- Criterios de selecci√≥n de fuentes

### Fuentes Analizadas y Validadas
- N√∫mero total de fuentes evaluadas
- Distribuci√≥n por tipo (meta-an√°lisis, RCTs, guidelines, etc.)
- Criterios de calidad aplicados

## üß† AN√ÅLISIS CL√çNICO INTEGRAL
### Diagn√≥sticos Diferenciales con Razonamiento Bayesiano
[Lista priorizada con probabilidades y justificaci√≥n]

### Evaluaci√≥n de Evidencia por Calidad
[Gradaci√≥n A/B/C/D con justificaci√≥n metodol√≥gica]

### An√°lisis de Contradiciones
[Identificaci√≥n y resoluci√≥n de informaci√≥n conflictiva]

## ‚öïÔ∏è RECOMENDACIONES BASADAS EN EVIDENCIA
### Pr√≥ximos Pasos Diagn√≥sticos
[Secuencia l√≥gica basada en costo-efectividad]

### Consideraciones de Urgencia
[Timeline y red flags identificados]

### Gaps de Informaci√≥n Identificados
[Qu√© informaci√≥n adicional mejorar√≠a el diagn√≥stico]

## üìã METADATOS DE INVESTIGACI√ìN
### Proceso de B√∫squeda Ejecutado
[Transparencia del proceso para validaci√≥n]

**IMPORTANTE:** 
- Proporciona un an√°lisis EXHAUSTIVO (m√≠nimo 2000 palabras)
- Cada conclusi√≥n debe estar respaldada por evidencia espec√≠fica
- Incluye razonamiento cl√≠nico expl√≠cito paso a paso
- Identifica expl√≠citamente las limitaciones del an√°lisis

**B√öSQUEDA DIRIGIDA:** Enfoca tu investigaci√≥n aut√≥noma en:
- Epidemiolog√≠a y factores de riesgo espec√≠ficos para la demograf√≠a del paciente
- Diagn√≥stico diferencial sistem√°tico basado en s√≠ntomas
- Protocolos diagn√≥sticos y terap√©uticos actualizados
- Evidencia de alta calidad de los √∫ltimos 5 a√±os prioritariamente`;
  }

  private extractSources(response: any): any[] {
    // Extract sources using the same logic as geminiService.ts
    try {
      console.log('üîó Extracting sources from Deep Research response...');
      
      // Debug grounding metadata - check different possible locations for Gemini 1.5
      let groundingMetadata = response.candidates?.[0]?.groundingMetadata || 
                            (response as any).response?.candidates?.[0]?.groundingMetadata ||
                            (response as any).groundingMetadata;
      
      console.log('üîó Deep Research grounding metadata found:', !!groundingMetadata);
      
      // For Gemini 1.5 with GoogleSearchRetrieval, look for different structure
      const groundingChunks = groundingMetadata?.groundingChunks || 
                            groundingMetadata?.webSearchResults ||
                            groundingMetadata?.groundingSupports ||
                            groundingMetadata?.retrievalMetadata?.googleSearchDynamicRetrievalScore;
      
      console.log(`üìä Deep Research grounding chunks found: ${groundingChunks?.length || 0}`);
      
      // Transform grounding chunks to sources with flexible structure
      let sources = groundingChunks
        ? groundingChunks
            .filter((chunk: any) => chunk.web?.uri || chunk.webSearchResult?.uri || chunk.uri)
            .map((chunk: any) => ({
              web: {
                uri: chunk.web?.uri || chunk.webSearchResult?.uri || chunk.uri!,
                title: chunk.web?.title || chunk.webSearchResult?.title || chunk.title || 
                      chunk.web?.uri || chunk.webSearchResult?.uri || chunk.uri!,
              },
              relevanceScore: chunk.score || 0
            }))
        : [];

      console.log(`üåê Deep Research valid sources extracted: ${sources.length}`);
      return sources;
    } catch (error) {
      console.warn('Could not extract sources from Deep Research response:', error);
      return [];
    }
  }

  private extractResearchProcess(content: string): ResearchProcess | undefined {
    try {
      // Extract research process metadata from content
      // This is a simplified version - would need more sophisticated parsing
      const lines = content.split('\n');
      const processData: ResearchProcess = {
        planningPhase: {
          strategy: 'Deep Research Aut√≥nomo',
          identifiedTopics: this.extractTopics(content),
          estimatedQueries: 8
        },
        executionPhase: {
          queriesExecuted: this.extractQueries(content),
          sourcesFound: 0,
          refinementIterations: 3
        },
        synthesisPhase: {
          evidenceGrading: this.extractEvidenceGrades(content),
          contradictionsFound: 0,
          gapsIdentified: this.extractGaps(content)
        }
      };

      return processData;
    } catch (error) {
      console.warn('Could not extract research process:', error);
      return undefined;
    }
  }

  private extractTopics(content: string): string[] {
    const topics: string[] = [];
    const lines = content.split('\n');
    
    lines.forEach(line => {
      if (line.includes('###') || line.includes('##')) {
        const topic = line.replace(/#+\s*/, '').trim();
        if (topic && !topics.includes(topic)) {
          topics.push(topic);
        }
      }
    });

    return topics.slice(0, 10); // Limit to 10 topics
  }

  private extractQueries(content: string): SearchQuery[] {
    // This would be implemented based on actual Deep Research output format
    return [];
  }

  private extractEvidenceGrades(content: string): EvidenceGrade[] {
    // This would extract evidence grading from the content
    return [];
  }

  private extractGaps(content: string): string[] {
    const gaps: string[] = [];
    const lines = content.split('\n');
    
    lines.forEach(line => {
      if (line.toLowerCase().includes('gap') || 
          line.toLowerCase().includes('limitaci√≥n') ||
          line.toLowerCase().includes('informaci√≥n adicional')) {
        gaps.push(line.trim());
      }
    });

    return gaps.slice(0, 5); // Limit to 5 gaps
  }

  private calculateConfidenceScore(sources: any[], content: string): number {
    let score = 0;
    
    // Source quantity score (max 30 points)
    score += Math.min(sources.length * 1.5, 30);
    
    // Content depth score (max 40 points)
    const wordCount = content.split(' ').length;
    score += Math.min(wordCount / 50, 40);
    
    // Medical terms score (max 30 points)
    const medicalTerms = ['diagn√≥stico', 's√≠ntoma', 'tratamiento', 'evidencia', 'estudio'];
    const termCount = medicalTerms.reduce((count, term) => {
      return count + (content.toLowerCase().match(new RegExp(term, 'g')) || []).length;
    }, 0);
    score += Math.min(termCount * 2, 30);
    
    return Math.min(Math.round(score), 100);
  }
}